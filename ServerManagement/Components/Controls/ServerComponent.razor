@namespace ServerManagement.Components.Controls
@inject NavigationManager NavigationManager


@if (Server != null)
{
    <tr>
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@((Server.IsOnline?"green":"red"))">
            @(Server.IsOnline? "online":"offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                Random rnd = new Random();
                int x = rnd.Next(0, 500);
                <span>@x people online </span>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button" @onclick="@(() => {Server.IsOnline = !Server.IsOnline;})" class="btn btn-outline-danger">Off</button>
            }
            else
            {
                <button type="button" @onclick="@(() => {Server.IsOnline = !Server.IsOnline;})" class="btn btn-outline-success">On</button>
            }
            &nbsp;
            <a href="/server/@Server.ServerId" class="btn btn-link">Edit Server</a>
        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-server-{Server.ServerId}")"
                      OnValidSubmit="@(() => DeleteServer(Server.ServerId))">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code {
    [Parameter]
    public Server? Server { get; set; }

    // private bool editingServer = false;

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            var server = ServersRepository.GetServerById(serverId);
            ServersRepository.DeleteServer(serverId);

            NavigationManager.NavigateTo("/servers", true); // forces a reload, thereby triggering the getserversbycity.

        }
    }
 
}
