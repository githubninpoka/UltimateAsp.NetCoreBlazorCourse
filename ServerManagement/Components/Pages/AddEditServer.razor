@page "/server/{id:int?}" 
@* example of optional parameter triggering different behavior *@

@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock> <!-- being able to prevent the user from accidentally navigating away -->
@if (Id.HasValue)
{
    <h3>Edit Server</h3>
}
else
{
    <h3>Add Server</h3>
}

<EditForm Model="server" FormName="AddServerForm" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    @if (server.ServerId > 0)
    {
        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
    }
    <FieldComponent Label="Servername">
        <Control>
            <InputText @bind-Value="server.Name" class="form-control"></InputText>
        </Control>
        <ValidationControl>
            <ValidationMessage For="() => server.Name"></ValidationMessage>
        </ValidationControl>
    </FieldComponent>

    <FieldComponent Label="City">
        <Control>
            <InputText @bind-Value="server.City" class="form-control"></InputText>
        </Control>
        <ValidationControl>
            <ValidationMessage For="() => server.City"></ValidationMessage>
        </ValidationControl>
    </FieldComponent>
    <FieldComponent Label="Online?">
        <Control>
            <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
        </Control>
    </FieldComponent>
    @if (server.ServerId > 0)
    {
        <button class="btn btn-primary" type="submit">Update</button>
    }
    else
    {
        <button class="btn btn-primary" type="submit">Create</button>
    }
    &nbsp;
    <a href="/servers" class="btn btn-secondary">Cancel</a>
</EditForm>

@code {
    [Parameter] // a mapped URL parameter needs this attribute
    public int? Id { get; set; } // as long as this property has the same name ( case insensitive )
                                 // that should map just fine.

    //private Server? server;
    [SupplyParameterFromForm(FormName = "formServer")] // with this attribute, when there is a submit, the route will be picked from the url and figures out that this property needs to get the values
                                                       // formName is needed if there are multiple forms on the routable component.
    private Server? server { get; set; } // for form submission to work, the former field must become a property

    [SupplyParameterFromQuery]
    public string? City { get; set; }

    protected override void OnParametersSet() // is called when property is received from url
    {
        if (Id.HasValue)
        {
            server ??= ServersRepository.GetServerById(this.Id.Value); // OnParameterSet is called also when a form is submitted. by specifying this operator, the call to fetch the values from the repository
                                                                       // is only called when 'server' is still null (not on an update form)
            base.OnParametersSet();
        }
        else
        {
            server = new Server();
        }
        if (server != null & !string.IsNullOrEmpty(City))
        {
            server!.City = City;
        }
    }
    protected override Task OnParametersSetAsync() // you override this when you don't want to
                                                   // do stuff synchronously but you need to, for instance
                                                   // call an api to fetch data, or maybe search opensearch.
                                                   // and hence you call an xxxAsync method.
    {
        return base.OnParametersSetAsync();
    }



    private void Submit()
    {
        // now the local model is updated and it needs to be reflected back to the repository (this will become different with a dynamic repository)
        if (server != null && server.ServerId > 0)
        {
            ServersRepository.UpdateServer(server.ServerId, server);
        }
        else if (server != null)
        {
            ServersRepository.AddServer(server);
        }
        NavigationManager.NavigateTo($"/servers/back_from/{server!.City}"); // using the injected NavigationManager to move somewhere after pressing update button
    }

    async Task OnBeforeInternalNavigation(LocationChangingContext ctx)
    {
        // to make this method work when navigating to another page, remember that rendermode is what makes this prevention possible.
        // and navigating from page to page is not 'under the control' of the rendermode, unless the rendermode is set on the overarching component. namely the App.razor. So I've set it there too.
        if (!ctx.TargetLocation.Contains("servers"))
        {
            var IsConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (!IsConfirmed)
            {
                ctx.PreventNavigation();
            }
        }
    }

}
